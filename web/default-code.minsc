// Script

// Sum inputs using the Elements introspection opcodes
fn sumInputs($max_inputs) = `
  le64(0) // 64-bit accumulator for the total input sum
  OP_INSPECTNUMINPUTS // num inputs counter, 1-indexed (e.g starts at 1 for a single input at index 0)
  #"starting loop"
  unrollFor($max_inputs, |$n| ` // errors if there are more inputs
    #{"loop:"+$n}
    OP_DUP OP_1SUB // get input index (counter-1)
    OP::INPUT_VALUE // get input value
    OP_ROT // bring sum accumulator to top
    OP::ADD64_VERIFY // add current input value to sum
    OP_SWAP // bring current index back to top
  `) // (should check asset id too -- skipped here for brevity)
`;

// Ensure the total inputs sum is at least 2 BTC (for up to 3 inputs)
$minimum_2btc = `sumInputs(3) le64(2 BTC) OP_GREATERTHANOREQUAL64`;


// Miniscript

$alice = xpub68Gmy5EdvgibQVfPdqkBBCHxA5htiqg55crXYuXoQRKfDBFA1WEjWgP6LHhwBZeNK1VTsfTFUHCdrfp1bgwQ9xv5ski8PX9rL2dZXvgGDnw/0;
$bob = xpub69tT6QWuMwV9bppMzxDX39hz6vcwsgK6YE4gR5cA4auaHsX6dR7uCu566h2WXEGjQe8B89PUJEwsaTJZiDTmLbGVPDDz9JjohA46jUEPvtb;
$charlie = xpub6BCmnsYVHYpxh4gPrwWXbYZwGsDHoGP69rQR7EQkWDNKJDuCqhSJXBRsTxiap6fsCmG2YNUVjn3WhpqvtRcwuMX5HyFdvuEwghKjmWMaGrA;

$alice_wpkh = wpkh($alice/5/0/*);
$wsh = wsh(pk($bob) && older(1 year));
$tr = tr($alice, [ pk($bob), pk($charlie) && older(30 days) ]);

$htlc_redeem = pk($alice) && sha256(907bde3816465e678dd2d661bf3d84f933e71c5e2ea25543247df7a5858dfa55);
$htlc_refund = pk($bob) && older(2 days);
$htlc_tr = tr(likely@$htlc_redeem || $htlc_refund); // NUMS as the internal key


// Transactions

$tx = tx([
  "version": 2,
  "locktime": 2025-06-02T,
  // all fields are optional

  "inputs": [
    [ "prevout": 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b:3, "sequence": 0xffffffff, "witness": [ 0x010203, 0x040506 ] ],
    [ "prevout": d9cd8155764c3543f10fad8a480d743137466f8d55213c8eaefcd12f06d43a80:2, "script_sig": `0x070809 0x009988` ],
    // or just the prevout's txid:vout
    b5bb9d8014a0f9b1d61e21e796d78dccdf1352f23cd32812f4850b878ae4944c:0,
  ],

  "outputs": [
    // Works with addresses & descriptors
    tb1qww749rc3svsjh2rlqn7jx345zl8r0agftt3ep2: 1 BTC,
    wpkh($alice/5): 100 bits,
    tr($bob, pk($alice) && older(10)): 150000 sats,
    wpkh(xpub661MyMwAqRbcGczjuMoRm6dXaLDEhW1u34gKenbeYqAix21mdUKJyuyu5F1rzYGVxyL6tmgBUAEPrEz92mBXjByMRiJdba9wpnN37RLLAXa/0/3): 20 uBTC,
    
    // Works with raw scriptPubKeys
    `OP_ADD 5 OP_EQUAL`: 0.9 BTC, // non-standard

    // Though you probably should scripthash wrap them
    wsh(`OP_ADD 5 OP_EQUAL`): 3 mBTC,
    tr(`OP_ADD 5 OP_EQUAL`): 1500000 sats,

    // Long form
    [ "script_pubkey": tr($bob), "amount": 10 uBTC ],
  ]
]);


// Simple CTV vault
//
// $cold_pk can sign unconditionally using the internal key path.
// $hot_policy can initiate a 2-stage withdrawl process with a mandatory delay
// period of $hot_delay, during which the $cold_pk can claim the funds back.

fn SimpleVault($cold_pk, $hot_policy, $hot_delay, $txo_amount, $fee) =
  tr($cold_pk, SimpleVaultHotPath($cold_pk, $hot_policy, $hot_delay, $txo_amount, $fee));

fn SimpleVaultHotPath($cold_pk, $hot_policy, $hot_delay, $txo_amount, $fee) =
  `tapscript($hot_policy) ctv [
    "output": tr($cold_pk, $hot_policy && older($hot_delay)): $txo_amount - $fee - DUST_AMOUNT,
    "output": tr($cold_pk, $hot_policy): DUST_AMOUNT, // anchor output for fee bumping
  ]`;
  // (has to embed Miniscript into a raw `` Script because rust-miniscript doesn't support CTV)

// Cold key $alice/0 can withdraw immediatly, hot key $alice/1 has to wait 2 weeks
$vault_simple = SimpleVault($alice/0, pk($alice/1), 2 weeks, 300 bits, 500 sats);

// A vault where the hot key is a 2-of-2 between alice and a cosigner
$vault_hot2f2 = SimpleVault($alice/0, pk($alice/1) && pk($charlie), 2 weeks, 300 bits, 500 sats);

// Vault with multiple secondary keys, each with its own delay configuration
fn MultiKeyVault($primary_pk, $txo_amount, $fee, $secondary_pks) =
  tr($primary_pk, map($secondary_pks, |$pk_tuple|
    SimpleVaultHotPath($primary_pk, $pk_tuple.0, $pk_tuple.1, $txo_amount, $fee)
  ));

$vault_multi = MultiKeyVault($alice/0, 300 bits, 500 sats, [
  pk($alice/1): 1 week, // alice's own hot key can withdraw with a 1 week delay
  pk($charlie): 1 year, // alice's friend charlie can help recover with a 1 year delay 
  pk($bob): 6 months, // alice's best friend can recover sooner
  (pk($charlie) && pk($bob)): 4 weeks, // together they can expedite to 4 weeks
]);


// Chicken HODL game
//
// Bob and Alice both deposit $amount BTC (+some for fees) into the covenant. If Alice and Bob both HODL
// for $hodl_time, they get their bitcoins back. If they chicken out before that they can still redeem,
// but have to forfeit $penalty BTC to the other party. (based on https://judica.org/blog/hodl-chicken/)

fn HodlChicken($alice_pk, $bob_pk, $hodl_time, $amount, $penalty) {
  // early redeem $tx signed by $loser_pk, $winner_pk wins $penatly
  fn earlyRedeem($loser_pk, $winner_pk) = [
    "outputs": [
      tr($loser_pk): $amount - $penalty,
      tr($winner_pk): $amount + $penalty,
    ]
  ];
  // $hodl_time passed, bob & alice get their bitcoins back
  $hodlRedeem = [
    "input": [ "sequence": $hodl_time ],
    "outputs": [
      tr($alice_pk): $amount,
      tr($bob_pk): $amount,
    ]
  ];

  log("HODL:", tx($hodlRedeem), "\nBob chickens:", tx(earlyRedeem($bob_pk, $alice_pk)), "\nAlice chickens:", tx(earlyRedeem($alice_pk, $bob_pk)));

  // Create a taproot tree for all the outcome branches (using a point with unknown discrete logarithm to eliminate key-path spends)
  NUMS + [
    // Alice chickens out
    `$alice_pk OP_CHECKSIG ctv(earlyRedeem($alice_pk, $bob_pk))`,

    // Bob chickens out
    `$bob_pk OP_CHECKSIG ctv(earlyRedeem($bob_pk, $alice_pk))`,

    // Both HODL all the way through & get their bitcoins back (either can sign)
    `$alice_pk OP_CHECKSIG ctv($hodlRedeem)`,
    `$bob_pk OP_CHECKSIG ctv($hodlRedeem)`,

    // Allow other outcomes by mutual agreement (could be an aggregated musig internal key)
    `$alice_pk OP_CHECKSIGVERIFY $bob_pk OP_CHECKSIG`,
  ]
  // $pk + $script is an alternative syntax for tr($pk, $script)
}

$hodl_chicken = HodlChicken($alice/5, $charlie/5, 1 year, 1 BTC, 0.5 BTC);

// The return value of the program is its final expression, or the main() function if none exists.
// A default main() is provided that displays all envirnoment variables using `env::pretty()`.
// Uncomment the line below to see debug (Rust's fmt::Debug) output instead:
// env::debug()