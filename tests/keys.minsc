test("Keys", |T| {
  test("Key generation & byte encoding", |T| {
    $sk = xpriv::rand();
    $pk = pubkey($sk);

    t::eq(typeof($sk), "seckey");
    t::eq(len(bytes($sk)), 78);
    t::eq(seckey(bytes($sk)), $sk);

    t::eq(typeof($pk), "pubkey");
    t::eq(len(bytes($pk)), 78);
    t::eq(pubkey(bytes($pk)), $pk)
  });

  test("Signing & Verification", |T| {
    $sk = xpriv::rand(), $pk = pubkey($sk);
    $H1 = hash::sha256("Hello"), $H2 = hash::sha256("Hello2");

    test("ECDSA", |T| {
      t::assert(ecdsa::verify($pk, $H1, ecdsa::sign($sk, $H1)));
      t::assert(!ecdsa::verify($pk, $H2, ecdsa::sign($sk, $H1)));

      it("Is deterministic (RFC 6979)", |T|
        t::eq(ecdsa::sign($sk, $H1), ecdsa::sign($sk, $H1)));

      it("Uses DER by default", len(ecdsa::sign($sk, $H1)) >= 70); // 70-73

      it("Supports compact encoding", |T|
        t::eq(len(ecdsa::sign($sk, $H1, true)), 64));
    });

    test("Schnorr", |T| {
      t::assert(schnorr::verify($pk, $H1, schnorr::sign($sk, $H1)));
      t::assert(!schnorr::verify($pk, $H1, schnorr::sign($sk, $H2)));

      it("Is deterministic without aux_rand", |T| {
        t:assert(schnorr::sign($sk, $H1) == schnorr::sign($sk, $H1));
        t::assert(schnorr::sign($sk, $H1, true) != schnorr::sign($sk, $H1, true));
      })
    })
  });


  test("BIP32 Test Vectors", |T| {
      mainnet = _$$_RECKLESSLY_RISK_MY_BITCOINS_$$_;

      test("Test 1", |T| {
        $sk = xpriv::from_seed(0x000102030405060708090a0b0c0d0e0f, mainnet);
        $pk = pubkey($sk);

        t::eq($sk, xprv9s21ZrQH143K3QTDL4LXw2F7HEK3wJUD2nW2nRk4stbPy6cq3jPPqjiChkVvvNKmPGJxWUtg6LnF5kejMRNNU3TGtRBeJgk33yuGBxrMPHi);
        t::eq($pk, xpub661MyMwAqRbcFtXgS5sYJABqqG9YLmC4Q1Rdap9gSE8NqtwybGhePY2gZ29ESFjqJoCu1Rupje8YtGqsefD265TMg7usUDFdp6W1EGMcet8);

        t::eq(bytes($sk), 0x0488ade4000000000000000000873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d50800e8f32e723decf4051aefac8e2c93c9c5b214313817cdb01a1494b917c8436b35);
        t::eq(bytes($pk), 0x0488b21e000000000000000000873dff81c02f525623fd1fe5167eac3a55a049de3d314bb42ee227ffed37d5080339a36013301597daef41fbe593a02cc513d0b55527ec2df1050e2e8ff49c85c2);
      });

      test("Test 2", |T| {
        $sk = xpriv::from_seed(0xfffcf9f6f3f0edeae7e4e1dedbd8d5d2cfccc9c6c3c0bdbab7b4b1aeaba8a5a29f9c999693908d8a8784817e7b7875726f6c696663605d5a5754514e4b484542, mainnet);
        $pk = pubkey($sk);

        t::eq($sk, xprv9s21ZrQH143K31xYSDQpPDxsXRTUcvj2iNHm5NUtrGiGG5e2DtALGdso3pGz6ssrdK4PFmM8NSpSBHNqPqm55Qn3LqFtT2emdEXVYsCzC2U);
        t::eq($pk, xpub661MyMwAqRbcFW31YEwpkMuc5THy2PSt5bDMsktWQcFF8syAmRUapSCGu8ED9W6oDMSgv6Zz8idoc4a6mr8BDzTJY47LJhkJ8UB7WEGuduB);
      });
  });
})