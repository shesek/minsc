// Opcode aliases
OP_TRUE = `1`, OP_FALSE = `0`, OP_0 = OP_FALSE;
OP_CHECKSEQUENCEVERIFY = OP_CSV;

// Sighash type, including combinations with ANYONECANPAY
SIGHASH_DEFAULT=0x00, SIGHASH_ALL=0x01, SIGHASH_NONE=0x02, SIGHASH_SINGLE=0x03,
SIGHASH_ALL_ANYONECANPAY=0x81, SIGHASH_NONE_ANYONECANPAY=0x82, SIGHASH_SINGLE_ANYONECANPAY=0x83;

// Dust amounts
DUST_WPKH=294, DUST_WSH=330, DUST_TR=330, DUST_P2A=240, DUST_PRE_SW=546,
DUST_AMOUNT=DUST_WSH; // also == DUST_TR

// A point with unknown discrete logarithm (to eliminate key-path spend)
// Uses the sha256 of G in DER encoding, as suggested by BIP 341: https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#constructing-and-spending-taproot-outputs
// assert::eq(NUMS, pubkey(hash::sha256(0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8)));
NUMS = pubkey(0x50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0);
TR_UNSPENDABLE = NUMS; // the default for tr(), can be overridden in user-land code

// Enables RBF and absolute lock time, disables relative lock time
ENABLE_RBF = 0xFFFFFFFD;

PREVOUT_NONE = 0000000000000000000000000000000000000000000000000000000000000000:0;

// Taproot utilities
fn tr::script_witness($tr, $script, $stack) = $stack + [ $script, tr::ctrl($tr, $script) ];

//
// Altstack manipulation
//

// ROLL/PICK from the altstack, for static $n
fn rollAlt($n) = `
  OP_FROMALTSTACK*$n
  {`OP_SWAP OP_TOALTSTACK`*($n - 1)}
`;
fn pickAlt($n) = `
  OP_FROMALTSTACK*$n
  OP_DUP OP_TOALTSTACK
  {`OP_SWAP OP_TOALTSTACK`*($n - 1)}
`;

// ROLL/PICK from the altstack, using the number at the top of the stack as the depth
fn nRollAlt($max_n) = `
  OP_DUP
  unrollFor($max_n, `OP_FROMALTSTACK OP_ROT OP_ROT`)
  OP_1SUB
  unrollFor($max_n, `OP_ROT OP_TOALTSTACK`)
`;
fn nPickAlt($max_n) = `
  OP_DUP
  unrollFor($max_n, `OP_FROMALTSTACK OP_ROT OP_ROT`)
  OP_SWAP OP_DUP OP_ROT
  unrollFor($max_n, `OP_ROT OP_TOALTSTACK`)
`;

// Read the top stack item as the number of stack items to send to the altstack
// stack in: <el1> <el2> .. <elN> <N total>, stack out: (empty)
// altstack out: <elN> .. <el2> <el1> <N total>
fn nToAlt($max_n) = `
  OP_DUP // keep a copy of the total number of elements
  // stack: <el1> <el2> .. <elN> <N total> <N counter>
  unrollFor($max_n, `OP_ROT OP_TOALTSTACK`)
  OP_TOALTSTACK // send the total number of elements as the final altstack item
`;

// The reverse of nToAlt() - bring back items from the altstack to the stack
// altstack in: <elN> .. <el2> <el1> <N total>, altstack out: (empty)
// stack in: (none), stack out: <el1> <el2> .. <elN> <N total>
fn nFromAlt($max_n) = `
  OP_FROMALTSTACK
  OP_DUP // keep a copy of the total number of elements
  // stack: <N total> <N counter>, alt stack: <el1> <el2> .. <elN>
  unrollFor($max_n, `OP_FROMALTSTACK OP_ROT*2`)
`;

//
// Looping utilities
//

// Loop unrolling: run $loop_body as long as $condition is met, up to $max_iterations times
// $loop_body can be a Script or a Function that accepts the iteration count and returns a Script.
// For example: `<num> unrollLoop(50, `OP_DUP 0 OP_GREATERTHANOREQUAL`, `OP_1SUB`)` to count down from <num> to 0, for <num>s of up to 50
// more advanced example with some comments: https://gist.github.com/shesek/758c25489869d77d4ef624ea43f18c49
fn unrollLoop($max_iterations, $condition, $loop_body) {
  $body_fn = if isFunction($loop_body) then $loop_body else |_| $loop_body;

  fn _unrollLoop($i) =
    if $i < $max_iterations then `$condition OP_IF $body_fn($i) _unrollLoop($i+1) OP_ENDIF`
    else `$condition OP_NOT OP_VERIFY` // fail the script if the condition is still met after $max_iterations
  ;
  _unrollLoop(0)
}

// Read the top stack item as the number of times to run $for_body
// Example with accumulator: `0 <num> unrollFor(50, `OP_DUP OP_ROT OP_ADD OP_SWAP`)` to sum the numbers from <num> to 1
fn unrollFor($max_iterations, $for_body) {
  $body_fn = if isFunction($for_body) then $for_body else |_| $for_body;
  `
    unrollLoop($max_iterations, `OP_DUP OP_0NOTEQUAL`, |$i| `$body_fn($i) OP_1SUB`)
    OP_DROP // drop the counter (always 0 by now)
  `
}

//
// Conditional control structures
//

// Check a series of nested OP_IF..OP_ELSE conditions, running the script associated with the first
// match or the optional `default` branch. If there's no match and no `default`, execution fails.
//
// For example, to match a number on the stack and run some code accordingly:
// ifelseif [
//   `OP_DUP 0 OP_EQUAL`: `OP_DROP $alice_pk OP_CHECKSIG`,
//   `OP_DUP 1 OP_EQUAL`: `OP_DROP <6 months> OP_CSV OP_DROP`,
//   default:             `OP_DROP $bob_pk OP_CHECKSIG`
// ]
fn ifelseif($clauses) = if isEmpty($clauses) then `` else `
  // Check all clauses but the last, running the first one that matches
  map(initial($clauses), |$clause| `$clause.0 OP_IF $clause.1 OP_ELSE`)

  // The last clause is checked using OP_VERIFY instead of another IF..ELSE to save some bytes.
  { if last($clauses).0 != default then `last($clauses).0 OP_VERIFY` else ``}
  last($clauses).1

  OP_ENDIF*(len($clauses) - 1)
`;

// Match the item at the top of the stack against the clauses and run the matching script,
// keeping the item being matched around as necessary. For example:
// match [
//   `0 OP_EQUAL`: `$alice_pk OP_CHECKSIG`,
//   `1 OP_EQUAL`: `<6 months> OP_CSV OP_DROP`,
// ]
fn match($clauses) = if isEmpty($clauses) then `` else
  ifelseif(
    // DUP the value being matched to keep it available for the next clause, while allowing condition
    // scripts to consume it (with e.g. OP_EQUAL). It will be removed before the matching script is run.
    map(initial($clauses), |$clause| `OP_DUP $clause.0`: `OP_DROP $clause.1`)

    // The last clause doesn't need to DUP/DROP as there are no more conditions that need the value.
    // In the case of a `default` branch, the value will remain available on stack.
    + [ last($clauses) ]
  );

// Match the item at the top of the stack for equality.
// For example: switch[ 0: `$alice_pk OP_CHECKSIG`, 1: `<6 months> OP_CSV OP_DROP` ]
fn switch($clauses) = match(map($clauses, |$clause| {
  $condition = if $clause.0 != default then `$clause.0 OP_EQUAL` else default;
  $condition: $clause.1
}));

// Pop an index number off the stack and execute the `$scripts` branch with that index.
// This can typically be better accomplished with separate Taproot leaves for the script
// branches, but branching within a single Script may be preferable for some simple cases.
// Does not support a `default` branch.
// For example: select[ `$alice_pk OP_CHECKSIG`, `<6 months> OP_CSV OP_DROP` ]
fn select($scripts) =
  if len($scripts) == 2 then
    // special-case optimization for 2 branches (MINIMALIF enforces 0/1 only)
    `OP_IF $scripts.1 OP_ELSE $scripts.0 OP_ENDIF`
  else switch(map(keys($scripts), |$index| $index: $scripts.$index))
;

//
// Script Marker utilities
//

MARK_SCRIPT=true;
MARK_CTX="";
// SCRIPT_MARKER_MAGIC available from Rust

dyn fn mark($kind, $body) = if !MARK_SCRIPT then `` else
  `SCRIPT_MARKER_MAGIC OP_DROP $kind OP_DROP {MARK_CTX+str($body)} OP_DROP`;
dyn fn mark::comment($comment) = mark("comment", $comment);
dyn fn mark::label($name) = mark("label", $name);
dyn fn mark::ctx($$context, $$fn) {
  MARK_CTX = MARK_CTX + $$context;
  $$fn()
}

//
// Transaction utilities
//

fn tx::sighash($tx, $vin, $utxos, $sighash_ty) = psbt::sighash([
  "unsigned_tx": $tx,
  "inputs": map($utxos, |$utxo| [
    "utxo": $utxo,
    "sighash_type": $sighash_ty, // set for all inputs but only matters for the $vin
  ])
], $vin);

// TODO support specifying the tapleaf heah (available when using psbt::sighash() directly)
// TOOD tx::sighash_sw0() with just the signed utxo & tx::sighash_presw() with just the utxo scriptPubKey
