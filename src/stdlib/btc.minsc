// Script Opcodes
// Generated with: curl -s https://raw.githubusercontent.com/rust-bitcoin/rust-bitcoin/master/primitives/src/opcodes.rs | egrep '^\s*OP_\w+ *=>' | sed -r 's/^\s*(OP_\w+) *=> *(0x\w{2}),.*/\1=script(\2),/' | egrep -v '^OP_(RETURN_|NOP|PUSHNUM)' | tr '\n' ' '
OP_RESERVED=script(0x50), OP_VER=script(0x62), OP_IF=script(0x63), OP_NOTIF=script(0x64), OP_VERIF=script(0x65), OP_VERNOTIF=script(0x66), OP_ELSE=script(0x67), OP_ENDIF=script(0x68), OP_VERIFY=script(0x69), OP_RETURN=script(0x6a), OP_TOALTSTACK=script(0x6b), OP_FROMALTSTACK=script(0x6c), OP_2DROP=script(0x6d), OP_2DUP=script(0x6e), OP_3DUP=script(0x6f), OP_2OVER=script(0x70), OP_2ROT=script(0x71), OP_2SWAP=script(0x72), OP_IFDUP=script(0x73), OP_DEPTH=script(0x74), OP_DROP=script(0x75), OP_DUP=script(0x76), OP_NIP=script(0x77), OP_OVER=script(0x78), OP_PICK=script(0x79), OP_ROLL=script(0x7a), OP_ROT=script(0x7b), OP_SWAP=script(0x7c), OP_TUCK=script(0x7d), OP_CAT=script(0x7e), OP_SUBSTR=script(0x7f), OP_LEFT=script(0x80), OP_RIGHT=script(0x81), OP_SIZE=script(0x82), OP_INVERT=script(0x83), OP_AND=script(0x84), OP_OR=script(0x85), OP_XOR=script(0x86), OP_EQUAL=script(0x87), OP_EQUALVERIFY=script(0x88), OP_RESERVED1=script(0x89), OP_RESERVED2=script(0x8a), OP_1ADD=script(0x8b), OP_1SUB=script(0x8c), OP_2MUL=script(0x8d), OP_2DIV=script(0x8e), OP_NEGATE=script(0x8f), OP_ABS=script(0x90), OP_NOT=script(0x91), OP_0NOTEQUAL=script(0x92), OP_ADD=script(0x93), OP_SUB=script(0x94), OP_MUL=script(0x95), OP_DIV=script(0x96), OP_MOD=script(0x97), OP_LSHIFT=script(0x98), OP_RSHIFT=script(0x99), OP_BOOLAND=script(0x9a), OP_BOOLOR=script(0x9b), OP_NUMEQUAL=script(0x9c), OP_NUMEQUALVERIFY=script(0x9d), OP_NUMNOTEQUAL=script(0x9e), OP_LESSTHAN=script(0x9f), OP_GREATERTHAN=script(0xa0), OP_LESSTHANOREQUAL=script(0xa1), OP_GREATERTHANOREQUAL=script(0xa2), OP_MIN=script(0xa3), OP_MAX=script(0xa4), OP_WITHIN=script(0xa5), OP_RIPEMD160=script(0xa6), OP_SHA1=script(0xa7), OP_SHA256=script(0xa8), OP_HASH160=script(0xa9), OP_HASH256=script(0xaa), OP_CODESEPARATOR=script(0xab), OP_CHECKSIG=script(0xac), OP_CHECKSIGVERIFY=script(0xad), OP_CHECKMULTISIG=script(0xae), OP_CHECKMULTISIGVERIFY=script(0xaf), OP_CLTV=script(0xb1), OP_CSV=script(0xb2), OP_CHECKSIGADD=script(0xba), OP_INVALIDOPCODE=script(0xff),
OP_PUSHDATA1=script(0x4c), OP_PUSHDATA2=script(0x4d), OP_PUSHDATA4=script(0x4e), OP_PUSHBYTES_0=script(0x00), OP_PUSHBYTES_1=script(0x01), OP_PUSHBYTES_2=script(0x02), OP_PUSHBYTES_3=script(0x03), OP_PUSHBYTES_4=script(0x04), OP_PUSHBYTES_5=script(0x05), OP_PUSHBYTES_6=script(0x06), OP_PUSHBYTES_7=script(0x07), OP_PUSHBYTES_8=script(0x08), OP_PUSHBYTES_9=script(0x09), OP_PUSHBYTES_10=script(0x0a), OP_PUSHBYTES_11=script(0x0b), OP_PUSHBYTES_12=script(0x0c), OP_PUSHBYTES_13=script(0x0d), OP_PUSHBYTES_14=script(0x0e), OP_PUSHBYTES_15=script(0x0f), OP_PUSHBYTES_16=script(0x10), OP_PUSHBYTES_17=script(0x11), OP_PUSHBYTES_18=script(0x12), OP_PUSHBYTES_19=script(0x13), OP_PUSHBYTES_20=script(0x14), OP_PUSHBYTES_21=script(0x15), OP_PUSHBYTES_22=script(0x16), OP_PUSHBYTES_23=script(0x17), OP_PUSHBYTES_24=script(0x18), OP_PUSHBYTES_25=script(0x19), OP_PUSHBYTES_26=script(0x1a), OP_PUSHBYTES_27=script(0x1b), OP_PUSHBYTES_28=script(0x1c), OP_PUSHBYTES_29=script(0x1d), OP_PUSHBYTES_30=script(0x1e), OP_PUSHBYTES_31=script(0x1f), OP_PUSHBYTES_32=script(0x20), OP_PUSHBYTES_33=script(0x21), OP_PUSHBYTES_34=script(0x22), OP_PUSHBYTES_35=script(0x23), OP_PUSHBYTES_36=script(0x24), OP_PUSHBYTES_37=script(0x25), OP_PUSHBYTES_38=script(0x26), OP_PUSHBYTES_39=script(0x27), OP_PUSHBYTES_40=script(0x28), OP_PUSHBYTES_41=script(0x29), OP_PUSHBYTES_42=script(0x2a), OP_PUSHBYTES_43=script(0x2b), OP_PUSHBYTES_44=script(0x2c), OP_PUSHBYTES_45=script(0x2d), OP_PUSHBYTES_46=script(0x2e), OP_PUSHBYTES_47=script(0x2f), OP_PUSHBYTES_48=script(0x30), OP_PUSHBYTES_49=script(0x31), OP_PUSHBYTES_50=script(0x32), OP_PUSHBYTES_51=script(0x33), OP_PUSHBYTES_52=script(0x34), OP_PUSHBYTES_53=script(0x35), OP_PUSHBYTES_54=script(0x36), OP_PUSHBYTES_55=script(0x37), OP_PUSHBYTES_56=script(0x38), OP_PUSHBYTES_57=script(0x39), OP_PUSHBYTES_58=script(0x3a), OP_PUSHBYTES_59=script(0x3b), OP_PUSHBYTES_60=script(0x3c), OP_PUSHBYTES_61=script(0x3d), OP_PUSHBYTES_62=script(0x3e), OP_PUSHBYTES_63=script(0x3f), OP_PUSHBYTES_64=script(0x40), OP_PUSHBYTES_65=script(0x41), OP_PUSHBYTES_66=script(0x42), OP_PUSHBYTES_67=script(0x43), OP_PUSHBYTES_68=script(0x44), OP_PUSHBYTES_69=script(0x45), OP_PUSHBYTES_70=script(0x46), OP_PUSHBYTES_71=script(0x47), OP_PUSHBYTES_72=script(0x48), OP_PUSHBYTES_73=script(0x49), OP_PUSHBYTES_74=script(0x4a), OP_PUSHBYTES_75=script(0x4b);

OP_CHECKSEQUENCEVERIFY = OP_CSV;
OP_FALSE = `0`, OP_TRUE = `1`;

// Sighash type, including combinations with ANYONECANPAY
SIGHASH_DEFAULT=0x00, SIGHASH_ALL=0x01, SIGHASH_NONE=0x02, SIGHASH_SINGLE=0x03,
SIGHASH_ALL_ANYONECANPAY=0x81, SIGHASH_NONE_ANYONECANPAY=0x82, SIGHASH_SINGLE_ANYONECANPAY=0x83;

// Dust amounts
DUST_WPKH=294, DUST_WSH=330, DUST_TR=330, DUST_P2A=240, DUST_PRE_SW=546,
DUST_AMOUNT=DUST_WSH; // also == DUST_TR

// A point with unknown discrete logarithm (to eliminate key-path spend)
// Uses the sha256 of G in DER encoding, as suggested by BIP 341: https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki#constructing-and-spending-taproot-outputs
// assert::eq(NUMS, pubkey(hash::sha256(0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8)));
NUMS = pubkey(0x50929b74c1a04954b78b4b6035e97a5e078a5a0f28ec96d547bfee9ace803ac0);
TR_UNSPENDABLE = NUMS; // the default for tr(), can be overridden in user-land code

// Enables RBF and absolute lock time, disables relative lock time
ENABLE_RBF = 0xFFFFFFFD;

PREVOUT_NONE = 0000000000000000000000000000000000000000000000000000000000000000:0;

// Taproot utilities
fn tr::script_witness($tr, $script, $stack) = $stack + [ $script, tr::ctrl($tr, $script) ];

//
// Altstack manipulation
//

// ROLL/PICK from the altstack, for static $n
fn rollAlt($n) = `
  OP_FROMALTSTACK*$n
  {`OP_SWAP OP_TOALTSTACK`*($n - 1)}
`;
fn pickAlt($n) = `
  OP_FROMALTSTACK*$n
  OP_DUP OP_TOALTSTACK
  {`OP_SWAP OP_TOALTSTACK`*($n - 1)}
`;

// ROLL/PICK from the altstack, using the number at the top of the stack as the depth
fn nRollAlt($max_n) = `
  OP_DUP
  unrollFor($max_n, `OP_FROMALTSTACK OP_ROT OP_ROT`)
  OP_1SUB
  unrollFor($max_n, `OP_ROT OP_TOALTSTACK`)
`;
fn nPickAlt($max_n) = `
  OP_DUP
  unrollFor($max_n, `OP_FROMALTSTACK OP_ROT OP_ROT`)
  OP_SWAP OP_DUP OP_ROT
  unrollFor($max_n, `OP_ROT OP_TOALTSTACK`)
`;

// Read the top stack item as the number of stack items to send to the altstack
// stack in: <el1> <el2> .. <elN> <N total>, stack out: (empty)
// altstack out: <elN> .. <el2> <el1> <N total>
fn nToAlt($max_n) = `
  OP_DUP // keep a copy of the total number of elements
  // stack: <el1> <el2> .. <elN> <N total> <N counter>
  unrollFor($max_n, `OP_ROT OP_TOALTSTACK`)
  OP_TOALTSTACK // send the total number of elements as the final altstack item
`;

// The reverse of nToAlt() - bring back items from the altstack to the stack
// altstack in: <elN> .. <el2> <el1> <N total>, altstack out: (empty)
// stack in: (none), stack out: <el1> <el2> .. <elN> <N total>
fn nFromAlt($max_n) = `
  OP_FROMALTSTACK
  OP_DUP // keep a copy of the total number of elements
  // stack: <N total> <N counter>, alt stack: <el1> <el2> .. <elN>
  unrollFor($max_n, `OP_FROMALTSTACK OP_ROT*2`)
`;

//
// Looping utilities
//

// Loop unrolling: run $loop_body as long as $condition is met, up to $max_iterations times
// $loop_body can be a Script or a Function that accepts the iteration count and returns a Script.
// For example: `<num> unrollLoop(50, `OP_DUP 0 OP_GREATERTHANOREQUAL`, `OP_1SUB`)` to count down from <num> to 0, for <num>s of up to 50
// more advanced example with some comments: https://gist.github.com/shesek/758c25489869d77d4ef624ea43f18c49
fn unrollLoop($max_iterations, $condition, $loop_body) {
  $body_fn = if isFunction($loop_body) then $loop_body else |_| $loop_body;

  fn _unrollLoop($i) =
    if $i < $max_iterations then `$condition OP_IF $body_fn($i) _unrollLoop($i+1) OP_ENDIF`
    else `$condition OP_NOT OP_VERIFY` // fail the script if the condition is still met after $max_iterations
  ;
  _unrollLoop(0)
}

// Read the top stack item as the number of times to run $for_body
// Example with accumulator: `0 <num> unrollFor(50, `OP_DUP OP_ROT OP_ADD OP_SWAP`)` to sum the numbers from <num> to 1
fn unrollFor($max_iterations, $for_body) {
  $body_fn = if isFunction($for_body) then $for_body else |_| $for_body;
  `
    unrollLoop($max_iterations, `OP_DUP OP_0NOTEQUAL`, |$i| `$body_fn($i) OP_1SUB`)
    OP_DROP // drop the counter (always 0 by now)
  `
}

//
// Conditional control structures
//

// Check a series of nested OP_IF..OP_ELSE conditions, running the script associated with the first
// match or the optional `default` branch. If there's no match and no `default`, execution fails.
//
// For example, to match a number on the stack and run some code accordingly:
// ifelseif [
//   `OP_DUP 0 OP_EQUAL`: `OP_DROP $alice_pk OP_CHECKSIG`,
//   `OP_DUP 1 OP_EQUAL`: `OP_DROP <6 months> OP_CSV OP_DROP`,
//   default:             `OP_DROP $bob_pk OP_CHECKSIG`
// ]
fn ifelseif($clauses) = if isEmpty($clauses) then `` else `
  // Check all clauses but the last, running the first one that matches
  map(initial($clauses), |$clause| `$clause.0 OP_IF $clause.1 OP_ELSE`)

  // The last clause is checked using OP_VERIFY instead of another IF..ELSE to save some bytes.
  { if last($clauses).0 != default then `last($clauses).0 OP_VERIFY` else ``}
  last($clauses).1

  OP_ENDIF*(len($clauses) - 1)
`;

// Match the item at the top of the stack against the clauses and run the matching script,
// keeping the item being matched around as necessary. For example:
// match [
//   `0 OP_EQUAL`: `$alice_pk OP_CHECKSIG`,
//   `1 OP_EQUAL`: `<6 months> OP_CSV OP_DROP`,
// ]
fn match($clauses) = if isEmpty($clauses) then `` else
  ifelseif(
    // DUP the value being matched to keep it available for the next clause, while allowing condition
    // scripts to consume it (with e.g. OP_EQUAL). It will be removed before the matching script is run.
    map(initial($clauses), |$clause| `OP_DUP $clause.0`: `OP_DROP $clause.1`)

    // The last clause doesn't need to DUP/DROP as there are no more conditions that need the value.
    // In the case of a `default` branch, the value will remain available on stack.
    + [ last($clauses) ]
  );

// Match the item at the top of the stack for equality.
// For example: switch[ 0: `$alice_pk OP_CHECKSIG`, 1: `<6 months> OP_CSV OP_DROP` ]
fn switch($clauses) = match(map($clauses, |$clause| {
  $condition = if $clause.0 != default then `$clause.0 OP_EQUAL` else default;
  $condition: $clause.1
}));

// Pop an index number off the stack and execute the `$scripts` branch with that index.
// This can typically be better accomplished with separate Taproot leaves for the script
// branches, but branching within a single Script may be preferable for some simple cases.
// Does not support a `default` branch.
// For example: select[ `$alice_pk OP_CHECKSIG`, `<6 months> OP_CSV OP_DROP` ]
fn select($scripts) =
  if len($scripts) == 2 then
    // special-case optimization for 2 branches (MINIMALIF enforces 0/1 only)
    `OP_IF $scripts.1 OP_ELSE $scripts.0 OP_ENDIF`
  else switch(map(keys($scripts), |$index| $index: $scripts.$index))
;

//
// Script Marker utilities
//

MARK_SCRIPT=true;
MARK_CTX="";
// SCRIPT_MARKER_MAGIC available from Rust

dyn fn mark($kind, $body) = if !MARK_SCRIPT then `` else
  `SCRIPT_MARKER_MAGIC OP_DROP $kind OP_DROP {MARK_CTX+str($body)} OP_DROP`;
dyn fn mark::comment($comment) = mark("comment", $comment);
dyn fn mark::label($name) = mark("label", $name);
dyn fn mark::ctx($$context, $$fn) {
  MARK_CTX = MARK_CTX + $$context;
  $$fn()
}

//
// Transaction utilities
//

fn tx::sighash($tx, $vin, $utxos, $sighash_ty) = psbt::sighash([
  "unsigned_tx": $tx,
  "inputs": map($utxos, |$utxo| [
    "utxo": $utxo,
    "sighash_type": $sighash_ty, // set for all inputs but only matters for the $vin
  ])
], $vin);

// TODO support specifying the tapleaf heah (available when using psbt::sighash() directly)
// TOOD tx::sighash_sw0() with just the signed utxo & tx::sighash_presw() with just the utxo scriptPubKey
