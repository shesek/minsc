// Built-in unique Symbols
// These don't have any special meaning on the Rust side, but are used in Minsc code for various purposes
null = symbol("null");
default = symbol("default");

// Common type checks
fn isArray($x) = typeof($x) == "array";
fn isFunction($x) = typeof($x) == "function";

//
// Array utilities
//
// len(), fillArray(), fold() & foldUntil() are Rust-provided builtins, everything else is built on top of them.

fn first($arr) = $arr.0;
fn last($arr) = $arr.(len($arr) - 1);
fn range($start, $end) = fillArray(($end-$start)+1, |$n| $start+$n);
fn keys($arr) = range(0, len($arr) - 1);
fn slice($arr, $start, $len) = fillArray($len, |$n| $arr.($start+$n));
fn tail($arr) = slice($arr, 1, len($arr) - 1); // get all but first element
fn initial($arr) = slice($arr, 0, len($arr) - 1); // get all but last element
fn isEmpty($arr) = len($arr) == 0;

fn map($arr, $fn)     = fold($arr, [], |$acc, $el| $acc + [ $fn($el) ]);
fn filter($arr, $fn)  = fold($arr, [], |$acc, $el| $acc + (if $fn($el) then [ $el ] else [ ]));
fn flatMap($arr, $fn) = fold($arr, [], |$acc, $el| $acc + $fn($el));

fn reduce($arr, $fn) = if !isEmpty($arr) then fold(tail($arr), $arr.0, $fn) else null;

fn find($arr, $fn)  = foldUntil($arr, null,  |$acc, $el| if $fn($el)  then true:$el  else false:null);
fn some($arr, $fn)  = foldUntil($arr, false, |$acc, $el| if $fn($el)  then true:true else false:false);
fn every($arr, $fn) = !some($arr, |$el| !$fn($el));

fn contains($arr, $needle) = some($arr, |$el| $el == $needle);

fn concat($xs) = reduce($xs, |$acc, $x| $acc + $x);
sum = concat; // works for arrays, bytes, strings and numbers

// Null handling utilities
fn mapNullable($value, $fn) = if $value != null then $fn($value) else null;
fn coalesce($values) = find($values, |$v| $v != null);

// String utilities
fn join($strs, $sep) =
  if isEmpty($strs) then ""
  else if len($strs) == 1 then $strs.0
  else concat([ $strs.0 ] + map(tail($strs), |$str| $sep + $str));

// Tag extraction. Works nicely with the pipe operator: ["a":["b":2]] | t("a") | t("b")
fn t($tagged, $tag) = $tagged | find(|$el| $el.0 == $tag) | mapNullable(|$el| $el.1);
fn ts($tagged, $tag) = $tagged | filter(|$el| $el.0 == $tag) | map(|$el| $el.1);


//
// Dev utilities
//

// Assertion
fn assert($bool) = $bool || throw("Assertion failed");
fn assert::eq($a, $b) = ($a == $b) || throw("Not equal: "+$a+" != "+$b+"");
fn assert::msg($bool, $msg) = $bool || throw($msg);

// Scope inspection
dyn fn env::pretty() = env() | map(|$kv| $kv.0+" = "+pretty($kv.1)+" // "+typeof($kv.1)) | join("\n\n")| symbol();
dyn fn env::debug() = env() | map(|$kv| $kv.0+" = "+_debug_nonfn($kv.1)) | join("\n\n") | symbol();
fn _debug_nonfn($v) = if !isFunction($v) then debug($v) else $v;

dyn fn log::env($label) = log("variables:\n----\n" + env::pretty() + "\n----");
dyn fn log::debug_env($label) = log("variables:\n----\n" + env::debug() + "\n----");
