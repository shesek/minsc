// Some useful Liquid asset IDs
LBTC = 0x6d521c38ec1ea15734ae22b7c46064412829c0d0579f0a713d1c04ede979026f;
TLBTC = 0x499a818545f6bae39fc03b637f2a4e1e64e590cac1bc3a6f6d71aa4443654c14;

//
// Opcodes
//

OP_DETERMINISTICRANDOM = script(0xc0), OP_CHECKSIGFROMSTACK = script(0xc1), OP_CHECKSIGFROMSTACKVERIFY = script(0xc2), OP_SUBSTR_LAZY = script(0xc3);
OP_SHA256INITIALIZE = script(0xc4), OP_SHA256UPDATE = script(0xc5), OP_SHA256FINALIZE = script(0xc6);
OP_INSPECTINPUTOUTPOINT = script(0xc7), OP_INSPECTINPUTASSET = script(0xc8), OP_INSPECTINPUTVALUE = script(0xc9), OP_INSPECTINPUTSCRIPTPUBKEY = script(0xca), OP_INSPECTINPUTSEQUENCE = script(0xcb), OP_INSPECTINPUTISSUANCE = script(0xcc), OP_PUSHCURRENTINPUTINDEX = script(0xcd), OP_INSPECTOUTPUTASSET = script(0xce), OP_INSPECTOUTPUTVALUE = script(0xcf), OP_INSPECTOUTPUTNONCE = script(0xd0), OP_INSPECTOUTPUTSCRIPTPUBKEY = script(0xd1), OP_INSPECTVERSION = script(0xd2), OP_INSPECTLOCKTIME = script(0xd3), OP_INSPECTNUMINPUTS = script(0xd4), OP_INSPECTNUMOUTPUTS = script(0xd5), OP_TXWEIGHT = script(0xd6);
OP_ADD64 = script(0xd7), OP_SUB64 = script(0xd8), OP_MUL64 = script(0xd9), OP_DIV64 = script(0xda), OP_NEG64 = script(0xdb), OP_LESSTHAN64 = script(0xdc), OP_LESSTHANOREQUAL64 = script(0xdd), OP_GREATERTHAN64 = script(0xde), OP_GREATERTHANOREQUAL64 = script(0xdf), OP_SCRIPTNUMTOLE64 = script(0xe0), OP_LE64TOSCRIPTNUM = script(0xe1), OP_LE32TOLE64 = script(0xe2), OP_TWEAKVERIFY = script(0xe4);

//
// Introspection utilities
//

// in: <input/output index>
// out: <explicit amount/asset> (or fail if confidential)
OP::INPUT_VALUE = `OP_INSPECTINPUTVALUE OP_VERIFY`;
OP::OUTPUT_VALUE = `OP_INSPECTOUTPUTVALUE OP_VERIFY`;
OP::INPUT_ASSET = `OP_INSPECTINPUTASSET OP_VERIFY`;
OP::OUTPUT_ASSET = `OP_INSPECTOUTPUTASSET OP_VERIFY`;

// Inspect scriptPubKeys with the given expected version number, or fail if the version mismatches
fn inspectOutSpkVer($expected_version) = `
    OP_INSPECTOUTPUTSCRIPTPUBKEY $expected_version OP_EQUALVERIFY
`;
fn inspectInSpkVer($expected_version) = `
    OP_INSPECTINPUTSCRIPTPUBKEY $expected_version OP_EQUALVERIFY
`;

// in: <expected amount/asset> <input/output index>
// out: none (or fail)
OP::OUTPUT_ASSET_EQ_VERIFY = `OP::OUTPUT_ASSET OP_EQUALVERIFY`;
OP::INPUT_ASSET_EQ_VERIFY = `OP::INPUT_ASSET OP_EQUALVERIFY`;
OP::OUTPUT_VALUE_EQ_VERIFY = `OP::OUTPUT_VALUE OP_EQUALVERIFY`;
OP::INPUT_VALUE_EQ_VERIFY = `OP::INPUT_VALUE OP_EQUALVERIFY`;

// in: <expected program> <expected version> <input/output index>
// out: none (or fail)
OP::OUTPUT_SPK_EQ_VERIFY = `OP_INSPECTOUTPUTSCRIPTPUBKEY OP_ROT OP_EQUALVERIFY*2`;
OP::INPUT_SPK_EQ_VERIFY = `OP_INSPECTINPUTSCRIPTPUBKEY OP_ROT OP_EQUALVERIFY*2`;

fn checkOutput($vout, $asset_id, $amount, $spk_version, $spk_prog) = `
  $asset_id $vout OP::OUTPUT_ASSET_EQ_VERIFY
  $amount   $vout OP::OUTPUT_VALUE_EQ_VERIFY
  $spk_prog $spk_version $vout OP::OUTPUT_SPK_EQ_VERIFY
`;

fn checkSameAsset($vin, $vout) = `
    $vin OP::INPUT_ASSET
    $vout OP::OUTPUT_ASSET
    OP_EQUALVERIFY
`;
fn checkSameValue($vin, $vout) = `
    $vin OP::INPUT_VALUE
    $vout OP::OUTPUT_VALUE
    OP_EQUALVERIFY
    // Checking the value matches without also checking the asset doesn't really make sense, so we always check both.
    checkSameAsset($vin, $vout)
`;
fn checkSameSpk($vin, $vout) = `
    $vin OP_INSPECTINPUTSCRIPTPUBKEY
    $vout OP_INSPECTOUTPUTSCRIPTPUBKEY
    OP_ROT
    OP_EQUALVERIFY*2
`;

OP::REQUIRE_RBF = `
  OP_PUSHCURRENTINPUTINDEX
  OP_INSPECTINPUTSEQUENCE
  0xFFFFFFFD
  OP_EQUALVERIFY
`;

//
// 64-bit arithmetic
//

OP::ADD64_VERIFY = `OP_ADD64 OP_VERIFY`;
OP::SUB64_VERIFY = `OP_SUB64 OP_VERIFY`;
OP::MUL64_VERIFY = `OP_MUL64 OP_VERIFY`;
OP::DIV64_VERIFY = `OP_DIV64 OP_VERIFY`;
OP::DIV64FLOOR_VERIFY = `OP::DIV64_VERIFY OP_NIP`;
OP::NEG64_VERIFY = `OP_NEG64 OP_VERIFY`;

OP::GT64_VERIFY = `OP_GREATERTHAN64 OP_VERIFY`;
OP::LT64_VERIFY = `OP_LESSTHAN64 OP_VERIFY`;
OP::GTE64_VERIFY = `OP_GREATERTHANOREQUAL64 OP_VERIFY`;
OP::LTE64_VERIFY = `OP_LESSTHANOREQUAL64 OP_VERIFY`;

// Get the MIN/MAX of the top 2 stack elements
OP::MAX64 = `OP_2DUP OP_LESSTHAN64 OP_IF OP_SWAP OP_ENDIF OP_DROP`;
OP::MIN64 = `OP_2DUP OP_GREATERTHAN64 OP_IF OP_SWAP OP_ENDIF OP_DROP`;

//
// Length encodings
//

// Get the length of the top stack element encoded in compactSize
// This is needed to construct the TapLeaf.
// in: <data blob>
// out: <data blob> <len(data blob) in compactSize>
OP::ENCODE_COMPACT_SIZE = `
  OP_SIZE
  OP_DUP 253 OP_GREATERTHANOREQUAL OP_IF
    // add 0xFD prefix for sizes >= 253 (uint16 encoded as two bytes)
    0xFD OP_SWAP OP_CAT
    // sizes < 253 don't require a prefix
    // sizes > 655350 require the 0xFE prefix, but they're unsupported (the maximum stack element size is 520)
  OP_ELSE
    OP_DUP 128 OP_GREATERTHANOREQUAL OP_IF
      // trim trailing 0x00 for sizes 128-252. this is necessary because script sizes are signed
      // while CompactSize is unsigned. affects sizes > 32767 too but they're unsupported.
      1 OP_LEFT
    OP_ENDIF
  OP_ENDIF
`;

// Get the PUSH opcode for the length of the top stack element
// This is useful for constructing a recursive quine.
// in: <data blob>
// out: <data blob> <len(data blob) as push opcode>
OP::ENCODE_PUSH_OP = `
  OP_SIZE
  OP_DUP 75 OP_GREATERTHAN OP_IF
    OP_DUP 255 OP_GREATERTHAN OP_IF
      // add 0x4D prefix for sizes > 255 (uint16 encoded as two bytes)
      bytes(OP_PUSHDATA2)
    OP_ELSE
      // trim trailing 0x00 byte for sizes 128-255. necessary because the push data length is unsigned.
      OP_DUP 127 OP_GREATERTHAN OP_IF 1 OP_LEFT OP_ENDIF
      // add 0x4C prefix for sizes 76-255 (uint16 encoded as one byte)
      bytes(OP_PUSHDATA1)
    OP_ENDIF
    // prepend size with the 0x4c/0x4d prefix
    OP_SWAP OP_CAT
  OP_ENDIF
  // sizes <= 75 don't require a prefix
  // sizes > 0xFFFF require OP_PUSHDATA4 but they're not supported
`;

//
// Taproot Utilities
//

TAPSCRIPT_VERSION = 0xc4;
TAPLEAF_TAG = "TapLeaf/elements";
TAPTWEAK_TAG = "TapTweak/elements";

// Compute the TapLeaf hash for the script bytes at the top of the stack
// in: <script bytes>
// out: <leaf hash>
OP::HASH_TAPLEAF = `
  // Compute the tagged hash prefix (XXX could be precomputed)
    TAPLEAF_TAG
    OP_SHA256 OP_DUP OP_CAT
  // Add version
    TAPSCRIPT_VERSION OP_CAT
    // Stack: <script bytes> <leaf: H('TapLeaf') || H('TapLeaf') || leaf_version>
  // Bring <script bytes> and prefix it with its size in compactSize encoding
    OP_SWAP
    OP::ENCODE_COMPACT_SIZE
    OP_SWAP OP_CAT
  // Add size+script to leaf
    OP_CAT
    // Stack: <leaf: H('TapLeaf') || H('TapLeaf') || leaf_version || compactSize(len(script_bytes)) || script_bytes>
  // Final tapleaf hash
    OP_SHA256
`;

// Compute for TapTweak hash for the merkle root and internal key given on the stack
// in: <merkle root> <internal key>
// out: <tweak hash>
OP::HASH_TAPTWEAK = `
  // Compute the tagged hash prefix (XXX could be precomputed)
    TAPTWEAK_TAG
    OP_SHA256 OP_DUP OP_CAT
  // Add internal pubkey to tweak data
    OP_SWAP OP_CAT
  // Add merkle root to tweak data (TapBranch, or TapLeaf in the case of a single script)
    OP_SWAP OP_CAT
    // Stack: <tweak data: H('TapTweak') || H('TapTweak') || internal_key || merkle_root>
  // Final taptweak hash
    OP_SHA256
`;
