use std::str::FromStr;
use crate::time;
use crate::parser::{ast, Expr, Stmt, ParseError, concat, prepend, call, self};

grammar;

extern {
  type Error = ParseError;
}

match {
  // Skip extra whitespace
  r"\s*" => { },
  // Skip `//` comments
  r"//[^\n\r]*[\n\r]*" => { },
  // Skip `/** comments */` -- note the extra *, necessary to allow `XPUB/*` for BIP32 derivation
  r"/\*\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => { },
} else {
  // Takes priority over IDENT
  r"BTC|[mu]BTC|bits?|satoshis?|sats?|msats?" => BTC_DENOMINATION,
} else{
  r"\d{1,25}" => INT, // i64::MAX_NUMBER is 19 digits long
  r"\d{1,25}\.\d{1,25}" => FLOAT, // f64 provides precision for up to approx 17 decimal digits

  // Alphanumeric-only idents are limited to a maximum of 25 characters so that they can't conflict
  // with bitcoin addresses/xpubs/WIFs. The limit does not apply if the ident contains a `$`, `_` or `::`.
  r"[a-zA-Z][a-zA-Z0-9]{0,24}|([a-zA-Z][a-zA-Z0-9]*)?[_$][a-zA-Z0-9_$]*|[a-zA-Z_$][a-zA-Z0-9_$]*(::[a-zA-Z0-9_$]+)+" => IDENT,

  r#""([^\\"]|\\[\\ntr"])*""# => STRING,
  r"0x[a-fA-F0-9]*" => BYTES_HEX,
  r"[a-fA-F0-9]{66}|[a-fA-F0-9]{64}|[a-fA-F0-9]{40}" => BYTES_HEX_NO0x, // allowed without the 0x prefix for exactly 33/32/20 bytes
  r"0z[A-Za-z0-9+/]+={0,2}" => BYTES_BASE64,
  r"\d{4}-\d{1,2}-\d{1,2}T(\d{1,2}:\d{1,2}(:\d{1,2})?Z?)?" => DATETIME,
  r"([123mn][1-9A-HJ-NP-Za-km-z]{25,34}|(bc|tb|bcrt)1[0-9a-z]{38,60}|(BC|TB|BCRT)1[0-9A-Z]{38,60})" => ADDRESS,
  r"(\[[a-fA-F0-9]{8}(/\d+['h]?)*\])?[xt]pub[0-9a-zA-Z]{100,120}" => XPUB,
  r"(\[[a-fA-F0-9]{8}(/\d+['h]?)*\])?[xt]prv[0-9a-zA-Z]{100,120}" => XPRV,
  r"\[[a-fA-F0-9]{8}(/\d+['h]?)*\]([a-fA-F0-9]{64}|[a-fA-F0-9]{66})" => SINGLE_PK_ORIG, // single pubkey with BIP32 origin
  r"[KLc][1-9A-HJ-NP-Za-km-z]{51}|[59][1-9A-HJ-NP-Za-km-z]{50}" => WIF,
  _,
}

// Top-level program
// Can have a final return value or use the main() function instead
pub Program: Expr = <stmts:Stmt*> <ret:Expr?> =>
  ast::Block { stmts, return_value: ret.map(Into::into), use_main: true }.into();

// A collection of statements with no return value
// Thin wrapper over a Vec<Stmt> used for library files
pub Library: ast::Library = Stmt* => ast::Library(<>);

// All possible statements
Stmt = {
  FnDef,
  Assign,
  IfStmt,
  ExprStmt,
}

// All possible expressions. Includes SimpleExpr & SExpr
Expr = {
  SimpleExpr,
  And,
  Or,
  IfExpr,
  SlashOp,
  FnExpr,
  Infix,
  ColonOp,
  Duration,
};

// A reduced set of expressions for use where Expr cannot be parsed unambiguously
// Includes SExpr, which can contain any wrapped expression
SimpleExpr = {
  SExpr,
  Not,
  Negate,
  Thresh,
  InfixProb,
  ArrayAccess,
};

// An even more reduced set of expressions for use where SimpleExpr cannot be parsed unambiguously
SExpr = {
  Number,
  Ident,
  Bytes,
  String,
  DateTime,
  BtcAmount,
  Address,
  PubKey,
  SecKey,

  Call,
  Array,
  ScriptFrag,
  ScriptMarkCtx,

  // Allow any expression wrapped in () or {}
  Paren<Expr>,
  BlockExpr,
};

//
// Expressions
//

Number = { Int, Float };

Int: Expr = INT =>? Ok(i64::from_str(<>).map_err(ParseError::from)?.into());
Float: Expr = FLOAT =>? Ok(f64::from_str(<>).map_err(ParseError::from)?.into());

Ident: Expr = IdentTerm => Expr::Ident(<>);
IdentTerm: ast::Ident = {
  IDENT => ast::Ident(<>.into()),
  // 'h' is a keyword token used for bip32 hardened derivation, but it is only usable in places where
  // identifiers aren't so it is safe not to treat it as a reserved keyword (which would be the default)
  "h" => ast::Ident(<>.into()),
};

Call = { SimpleCall, ExprCall, PipeCall };

// Call arguments. A single literal array argument (ArraySquare) may
// be provided without wrapping parenthesis, e.g. `tx [ "version": 2]`
CallArgs = { Paren<List0<Expr, ",">>, ArraySquare => vec![<>] };

// A call with a simple Ident as the function, e.g. foo(123)
SimpleCall: Expr = <func:Ident> <args:CallArgs> => ast::Call { func: func.into(), args }.into();

// A call with an expression as the function, e.g. foo(1)(2) or {|a| a+1}(2)
ExprCall: Expr = <func:ExprCallFunc> <args:CallArgs> => ast::Call { func: func.into(), args }.into();
ExprCallFunc = { WrapExpr, Call, ArrayAccess };

// Pipe call, e.g. `$first_arg | func($extra_args...)` -> `func($first_arg, $extra_args...)`
PipeCall: Expr = <first_arg:PipeCallLHS> "|" <func:PipeCallFunc> <extra_args:CallArgs> =>
  ast::Call { func: func.into(), args: prepend(extra_args, first_arg) }.into();
PipeCallLHS = { SExpr, ArrayAccess, Duration };
PipeCallFunc = { Ident, WrapExpr };

WrapExpr = { Paren<Expr>, BlockExpr };

IfExpr: Expr = "if" <condition:Expr> <then_val:IfExprThenVal> "else" <else_val:Expr> =>
    ast::IfExpr { condition: condition.into(), then_val: then_val.into(), else_val: else_val.into() }.into();

IfExprThenVal = { BlockExpr, "then" <Expr> };

And: Expr = <List2<AndOrBranch, "&&">> => ast::And(<>).into();
Or: Expr = <List2<AndOrBranch, "||">> => ast::Or(<>).into();
AndOrBranch = { SimpleExpr, SlashOp };

Thresh: Expr = <thresh:SExpr> "of" <policies:SimpleExpr> =>
  ast::Thresh { thresh: thresh.into(), policies: policies.into() }.into();

// A { .. } block expression with a final return value

BlockExpr: Expr = "{" <stmts:Stmt*> <ret:Expr> "}" =>
  ast::Block { stmts, return_value: Some(ret.into()), use_main: false }.into();

Array = { ArraySquare, ArrayCurly }

// Standard square brackets array - [E1, E2, E3, ...]
ArraySquare: Expr = "[" <List0<Expr, ",">> "]" =>
  ast::Array(<>).into();

// Support curly brackets arrays with exactly two elements: {E1,E2}
// For compatibility with the BIP386 tr() Output Descriptor syntax for script trees
ArrayCurly: Expr = "{" <e1:Expr> "," <e2:Expr> "}" =>
  ast::Array(vec![e1, e2]).into();

ArrayAccess_: Expr = <array:ArrayAccessLHS> "." <index:ArrayAccessRHS> =>
  ast::ArrayAccess { array: array.into(), index: index.into() }.into();
ArrayAccessLHS = { Ident, SimpleCall, BlockExpr, Bytes, ArrayAccess }; // would be nice to have: Array, Paren<Expr>
ArrayAccessRHS = { Int, Ident, Paren<Expr>, BlockExpr };

// Hack :<
// $arr.0.1 gets tokenized with 0.1 as a single FLOAT token during the lexer stage.
// This fixes it by transforming the resulting $arr.(0.1) to ($arr.0).1
ArrayAccessFixFloat: Expr = <array:ArrayAccessLHS> "." <two_indices:FLOAT> =>? {
  let mut current = array;
  for index in two_indices.split(".") {
    let index: i64 = index.parse().map_err(ParseError::from)?;
    current = ast::ArrayAccess { array: current.into(), index: Expr::Int(index).into() }.into();
  }
  Ok(current)
};
ArrayAccess = { ArrayAccess_, ArrayAccessFixFloat };

// An xpub or standalone public key with bip32 origin (33 bytes or 32 for x-only, uncompressed is unsupported)
// Standalone keys with no origin are indistinguishable from other Bytes, and so are constructed as such and later coerced.
PubKey: Expr = PubKey_ =>? Ok(Expr::PubKey(<>.parse().map_err(ParseError::from)?));
PubKey_ = { XPUB, SINGLE_PK_ORIG };

// An Xprv or WIF
SecKey: Expr = SecKey_ =>? Ok(Expr::SecKey(<>.parse().map_err(ParseError::from)?));
SecKey_ = { XPRV, WIF };

Bytes: Expr = {
  BYTES_HEX =>? Ok(parser::bytes_from_hex(&<>[2..])?),

  // Bytes are typically constructed with the `0x` prefix, but can be constructed without it if
  // the length is exactly 33, 32 or 20 bytes. This is done for compatibility with the Miniscript
  // Policy syntax for literal pubkeys, x-only-pubkeys and hashes. The Bytes value will later get
  // get coerced into a PubKey/Hash as needed. Note that SINGLE_PK_ORIG already matches 0x-less
  // pubkeys that include bip32 origin info, and constructs them directly as PubKeys.
  BYTES_HEX_NO0x =>? Ok(parser::bytes_from_hex(&<>)?),

  BYTES_BASE64 =>? Ok(parser::bytes_from_base64(&<>[2..])?),
};

// Addresses in Bech32 or Base58check encoding
// Supports the 1/2/3 prefixes for Base58 and bc/tb/bcr for Bech32 (mainnet, signet, testnet and regtest)
//
// Bech32 addresses are only supported up to 63 characters. This is OK for Segwit v0/v1 (always 42/62),
// but may not be sufficient for future versions which can be up to 74 characters long.
// Supporting them requires resolving the ambiguity with "0x"-less 64-characters long hexadecimal strings.
Address: Expr = ADDRESS =>? Ok(Expr::Address(<>.parse().map_err(ParseError::from)?));

String: Expr = STRING => parser::string_from_escaped_str(&<>[1..<>.len()-1]);

// Script fragment enclosed in backticks
ScriptFrag: Expr = "`" <fragments:ScriptFragPart*> "`" => ast::ScriptFrag { fragments }.into();
ScriptFragPart = {
  Ident, Number, String, Bytes, PubKey, DateTime, SimpleCall, ArrayAccess,
  BlockExpr, "<" <SimpleExpr> ">", "<" <Duration> ">", "<" <SlashOp> ">",
  ScriptFragPart_Infix, ScriptFragPart_Mark,
};
// Cannot allow all Infix operators because < > conflicts
ScriptFragPart_Infix: Expr = <lhs:ScriptFragPart> <op:InfixOpScriptSafe> <rhs:ScriptFragPart_RHS> =>
   ast::Infix { op, lhs: lhs.into(), rhs: rhs.into() }.into();

ScriptFragPart_RHS = { SExpr, ArrayAccess };

// Script Marker syntax, only valid within script fragments.
// Translated into the AST as a Call, it probably shouldn't.
ScriptFragPart_Mark: Expr = {
  // @LABEL, @{"LABEL"}, @("LABEL")
  "@" <IDENT> => call("mark::label", vec![Expr::String(<>.to_string())]),
  "@" <Paren<Expr>> => call("mark::label", vec![<>]),
  "@" <BlockExpr> => call("mark::label", vec![<>]),

  // #"COMMENT"
  "#" <ScriptFragPart_RHS> => call("mark::comment", vec![<>]),

  // @KIND(), @KIND("BODY"), @("KIND, "BODY")
  "@" <kind:IDENT> <body:Paren<Expr?>> => call("mark", vec![kind.to_string().into(), body.unwrap_or_else(|| "".to_string().into()) ]),
  "@" <Paren<(<Expr> "," <Expr>)>> => call("mark", vec![<>.0, <>.1]),

  // @@("CONTEXT", ScriptExpr)
  ScriptMarkCtx,
};

// Defined separately because it is also allowed outside ``
ScriptMarkCtx: Expr = "@@" <Paren<(<Expr> "," <Expr>)>> =>
  // Wraps the body expression in a dynamically-scoped function, to be evaluated from within the `mark::ctx()` scope.
  call("mark::ctx", vec![<>.0, ast::FnExpr { params: vec![], body: <>.1.into(), dynamic_scoping: true }.into()]);


// Anonymous function expression
FnExpr: Expr = <dyn_scoping:"dyn"?> <params:FnExprParams> <body:FnExprBody> =>
    ast::FnExpr { params, body: body.into(), dynamic_scoping: dyn_scoping.is_some() }.into();
FnExprParams = {
  "|" <List0<IdentTerm, ",">> "|",
  // No arguments should already be captured by the `List0`, but for some reason it isn't.
  // Possibly because `||` is also a terminal for policy OR?
  "||" => vec![],
};
FnExprBody = { Expr, FnBlockNoReturn };

// Allow function bodies without an explicit final return value (true is returned by default).
// Also used for FnDef below.
FnBlockNoReturn: Expr = "{" <Stmt*> "}" =>
  ast::Block { stmts: <>, return_value: None, use_main: false }.into();

// Binary infix operators with left associativity
Infix: Expr = <lhs:InfixLHS> <op:InfixOp> <rhs:InfixRHS> =>
   ast::Infix { op, lhs: lhs.into(), rhs: rhs.into() }.into();
InfixRHS = { SimpleExpr, And, Or, SlashOp, Duration }; // Expr - IfExpr - FnExpr - Infix - ColonOp
InfixLHS = { InfixRHS, Infix }; // left-associative recursion
InfixOp = { InfixOpScriptSafe, InfixOpNonScript };
InfixOpScriptSafe: ast::InfixOp = {
  // Can be used everywhere, including ScriptFag
  "+" => ast::InfixOp::Add,
  "-" => ast::InfixOp::Subtract,
  "*" => ast::InfixOp::Multiply,
  "%" => ast::InfixOp::Mod,
  "==" => ast::InfixOp::Eq,
  "!=" => ast::InfixOp::NotEq,
};
InfixOpNonScript: ast::InfixOp = {
  // Cannot be used within a ScriptFrag
  ">" => ast::InfixOp::Gt,
  "<" => ast::InfixOp::Lt,
  ">=" => ast::InfixOp::Gte,
  "<=" => ast::InfixOp::Lte,
};

// Colon tuple constructor operator. Defined separately from Infix to use right associativity.
ColonOp: Expr = <lhs:ColonLHS> ":" <rhs:ColonRHS> =>
   ast::Infix { op: ast::InfixOp::Colon, lhs: lhs.into(), rhs: rhs.into() }.into();
ColonLHS = { SimpleExpr, And, Or, SlashOp, Duration, Infix }; // Expr - IfExpr - FnExpr - ColonOp
ColonRHS = { ColonLHS, ColonOp, FnExpr, IfExpr }; // right-associative recursion

// Probability assignment operator. Defined separately from Infix with less options for the LHS/RHS,
// so that it can be used unambiguously as an AndOrBranch element without requiring parenthesis.
InfixProb: Expr = <lhs:SExpr> "@" <rhs:SimpleExpr> =>
  ast::Infix { op: ast::InfixOp::Prob, lhs: lhs.into(), rhs: rhs.into() }.into();

// Slash operator (binary & left-associative). Used for both number division and BIP32 derivation.
// Defined separately from Infix to support BIP32's modifiers (' h *) and BIP389's syntax in the RHS
SlashOp: Expr = <lhs:SlashLHS> "/" <rhs:SlashRHS> => ast::SlashOp { lhs: lhs.into(), rhs }.into();
SlashLHS = { SimpleExpr, SlashOp }; // left-associative recursion
SlashRHS: ast::SlashRhs = {
  // Number division or BIP32 non-hardened key derivation
  SimpleExpr => ast::SlashRhs::Expr(<>.into()),

  // BIP32 hardened key derivation
  <SimpleExpr> HardenedModifier => ast::SlashRhs::HardenedDerivation(<>.into()),

  // BIP32 wildcard modifiers
  "*" => ast::SlashRhs::UnhardenedWildcard,
  "*" HardenedModifier => ast::SlashRhs::HardenedWildcard,

  // For compatibility with the BIP389 multipath descriptor syntax: XPUB/0/<0;1>/9
  // Mixing up hardened and non-hardened is currently unsupported.
  // Can alternatively be expressed using standard Minsc arrays: XPUB/0/[0,1]/9 or XPUB/0/[0,1]h/9
  "<" <List2<SimpleExpr, ";">> ">" => ast::SlashRhs::Expr(Box::new(ast::Array(<>).into())),
  "<" <List2<(<SimpleExpr> HardenedModifier), ";">> ">" => ast::SlashRhs::HardenedDerivation(Box::new(ast::Array(<>).into())),
};
HardenedModifier = { "'", "h" };

Not: Expr = "!" <SimpleExpr> =>
  ast::Not(<>.into()).into();

Negate: Expr = "-" <SimpleExpr> =>
  ast::Negate(<>.into()).into();

// Duration and times

Duration = { DurationBlocks, DurationTime };

DurationBlocks: Expr = <num:SExpr> "blocks" =>
  ast::Duration::BlockHeight(num.into()).into();

DurationTime: Expr = <heightwise:"heightwise"?> <parts:DurationTimePart+>  =>
  ast::Duration::BlockTime { parts, heightwise: heightwise.is_some() }.into();

DurationTimePart: ast::DurationPart = <n:DurationTimeNum> <i:DurationTimeUnit> => (n.into(), i);
DurationTimeNum = { Number, SimpleCall, Ident, Paren<Expr> };
DurationTimeUnit: ast::DurationUnit = {
  "year" => ast::DurationUnit::Years,
  "years" => ast::DurationUnit::Years,
  "month" => ast::DurationUnit::Months,
  "months" => ast::DurationUnit::Months,
  "week" => ast::DurationUnit::Weeks,
  "weeks" => ast::DurationUnit::Weeks,
  "day" => ast::DurationUnit::Days,
  "days" => ast::DurationUnit::Days,
  "hour" => ast::DurationUnit::Hours,
  "hours" => ast::DurationUnit::Hours,
  "minute" => ast::DurationUnit::Minutes,
  "minutes" => ast::DurationUnit::Minutes,
  "second" => ast::DurationUnit::Seconds,
  "seconds" => ast::DurationUnit::Seconds,
}

DateTime: Expr = DATETIME =>? Ok(Expr::DateTime(time::parse_datetime(<>)?));

BtcAmount: Expr = <num:SExpr> <denom:BTC_DENOMINATION> =>
  ast::BtcAmount(num.into(), denom.parse().expect("must be valid")).into();

//
// Statements
//

Assign: Stmt = "let"? <assigns:List1<Assignment, ",">> ";" =>
    ast::Assign(assigns).into();

Assignment: ast::Assignment = <lhs:IdentTerm> "=" <rhs:Expr> =>
    ast::Assignment { lhs, rhs };

FnDef: Stmt = <dyn_scoping:"dyn"?> "fn" <ident:IdentTerm> <params:Paren<List0<IdentTerm, ",">>> <body:FnDefBody> =>
  ast::FnDef { ident, params, body, dynamic_scoping: dyn_scoping.is_some() }.into();

FnDefBody = { "=" <Expr> ";", <BlockExpr> ";"?, <FnBlockNoReturn> ";"? };

IfStmt: Stmt = "if" <condition:Expr> "{" <then_body:Stmt*> "}" <else_body:IfStmtElse?> =>
    ast::IfStmt { condition, then_body, else_body }.into();
IfStmtElse: Vec<Stmt> = {
  "else" "{" <Stmt*> "}",
  // allow nested `else if` statements without `{}`
  "else" <IfStmt> => vec![<>],
};

// An expression used in a statement position. The evaluated return value is
// discarded, but this can be useful for expressions that produce side effects
// like logging and exceptions.
ExprStmt: Stmt = <Expr> ";" => ast::ExprStmt(<>).into();

// Helpers

// A `S`-separated list of zero or more `T` values
List0<T, S>: Vec<T> = <l:(<T> S)*> <t:T?> => concat(l, t);

// A `S`-separated list of one or more `T` values
List1<T, S>: Vec<T> = <l:(<T> S)*> <t:T> => concat(l, Some(t));

// A `S`-separated list of two or more `T` values
List2<T, S>: Vec<T> = <l:(<T> S)+> <t:T> => concat(l, Some(t));

Paren<T> = "(" <T> ")";
